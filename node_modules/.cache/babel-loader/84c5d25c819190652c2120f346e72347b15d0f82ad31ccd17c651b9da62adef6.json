{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monetizelab\\\\OneDrive\\\\Desktop\\\\trisDoc\\\\usainsurancereviews\\\\insurance-form\\\\src\\\\components\\\\LoadingDeals.js\",\n  _s = $RefreshSig$();\n// src/components/LoadingDeals.js\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FormDataContext } from \"../contexts/FormDataContext\";\nimport axios from \"axios\";\nimport \"./../LoadingDeals.css\"; // Custom CSS for the loading animation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingDeals = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    formData,\n    setFormData\n  } = useContext(FormDataContext);\n  const [loadingComplete, setLoadingComplete] = useState(false); // Track loading completion\n\n  useEffect(() => {\n    const fetchCityFromZip = async zipCode => {\n      try {\n        const response = await axios.get(`https://api.zippopotam.us/us/${zipCode}`);\n        const cityName = response.data.places[0][\"place name\"];\n\n        // Update formData with the fetched city name\n        setFormData(prevData => ({\n          ...prevData,\n          city: cityName\n        }));\n\n        // Indicate that the loading is complete\n        setLoadingComplete(true);\n      } catch (error) {\n        console.error(\"Error fetching city data:\", error);\n\n        // In case of error, still set default city and indicate loading is complete\n        setFormData(prevData => ({\n          ...prevData,\n          city: \"your area\"\n        }));\n        setLoadingComplete(true);\n      }\n    };\n    if (formData.zipCode) {\n      fetchCityFromZip(formData.zipCode);\n    } else {\n      // If there's no zip code in formData, navigate directly to the offers page\n      setLoadingComplete(true);\n    }\n  }, [formData.zipCode, setFormData]);\n  useEffect(() => {\n    // Navigate to the offers page only once loading is complete\n    if (loadingComplete) {\n      navigate(\"/offers\");\n    }\n  }, [loadingComplete, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-deals-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-text\",\n      children: \"Looking for the best deals...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(LoadingDeals, \"MkIUfD6EYjK7DMHbjyPNWFS3/Iw=\", false, function () {\n  return [useNavigate];\n});\n_c = LoadingDeals;\nexport default LoadingDeals;\nvar _c;\n$RefreshReg$(_c, \"LoadingDeals\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useNavigate","FormDataContext","axios","jsxDEV","_jsxDEV","LoadingDeals","_s","navigate","formData","setFormData","loadingComplete","setLoadingComplete","fetchCityFromZip","zipCode","response","get","cityName","data","places","prevData","city","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Monetizelab/OneDrive/Desktop/trisDoc/usainsurancereviews/insurance-form/src/components/LoadingDeals.js"],"sourcesContent":["// src/components/LoadingDeals.js\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FormDataContext } from \"../contexts/FormDataContext\";\r\nimport axios from \"axios\";\r\nimport \"./../LoadingDeals.css\"; // Custom CSS for the loading animation\r\n\r\nconst LoadingDeals = () => {\r\n  const navigate = useNavigate();\r\n  const { formData, setFormData } = useContext(FormDataContext);\r\n  const [loadingComplete, setLoadingComplete] = useState(false); // Track loading completion\r\n\r\n  useEffect(() => {\r\n    const fetchCityFromZip = async (zipCode) => {\r\n      try {\r\n        const response = await axios.get(\r\n          `https://api.zippopotam.us/us/${zipCode}`\r\n        );\r\n        const cityName = response.data.places[0][\"place name\"];\r\n\r\n        // Update formData with the fetched city name\r\n        setFormData((prevData) => ({\r\n          ...prevData,\r\n          city: cityName,\r\n        }));\r\n\r\n        // Indicate that the loading is complete\r\n        setLoadingComplete(true);\r\n      } catch (error) {\r\n        console.error(\"Error fetching city data:\", error);\r\n\r\n        // In case of error, still set default city and indicate loading is complete\r\n        setFormData((prevData) => ({\r\n          ...prevData,\r\n          city: \"your area\",\r\n        }));\r\n\r\n        setLoadingComplete(true);\r\n      }\r\n    };\r\n\r\n    if (formData.zipCode) {\r\n      fetchCityFromZip(formData.zipCode);\r\n    } else {\r\n      // If there's no zip code in formData, navigate directly to the offers page\r\n      setLoadingComplete(true);\r\n    }\r\n  }, [formData.zipCode, setFormData]);\r\n\r\n  useEffect(() => {\r\n    // Navigate to the offers page only once loading is complete\r\n    if (loadingComplete) {\r\n      navigate(\"/offers\");\r\n    }\r\n  }, [loadingComplete, navigate]);\r\n\r\n  return (\r\n    <div className=\"loading-deals-container\">\r\n      <div className=\"loading-spinner\"></div>\r\n      <p className=\"loading-text\">Looking for the best deals...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingDeals;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,uBAAuB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEQ,QAAQ;IAAEC;EAAY,CAAC,GAAGZ,UAAU,CAACI,eAAe,CAAC;EAC7D,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/DD,SAAS,CAAC,MAAM;IACd,MAAMc,gBAAgB,GAAG,MAAOC,OAAO,IAAK;MAC1C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC9B,gCAAgCF,OAAO,EACzC,CAAC;QACD,MAAMG,QAAQ,GAAGF,QAAQ,CAACG,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;;QAEtD;QACAT,WAAW,CAAEU,QAAQ,KAAM;UACzB,GAAGA,QAAQ;UACXC,IAAI,EAAEJ;QACR,CAAC,CAAC,CAAC;;QAEH;QACAL,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;;QAEjD;QACAZ,WAAW,CAAEU,QAAQ,KAAM;UACzB,GAAGA,QAAQ;UACXC,IAAI,EAAE;QACR,CAAC,CAAC,CAAC;QAEHT,kBAAkB,CAAC,IAAI,CAAC;MAC1B;IACF,CAAC;IAED,IAAIH,QAAQ,CAACK,OAAO,EAAE;MACpBD,gBAAgB,CAACJ,QAAQ,CAACK,OAAO,CAAC;IACpC,CAAC,MAAM;MACL;MACAF,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,CAACH,QAAQ,CAACK,OAAO,EAAEJ,WAAW,CAAC,CAAC;EAEnCX,SAAS,CAAC,MAAM;IACd;IACA,IAAIY,eAAe,EAAE;MACnBH,QAAQ,CAAC,SAAS,CAAC;IACrB;EACF,CAAC,EAAE,CAACG,eAAe,EAAEH,QAAQ,CAAC,CAAC;EAE/B,oBACEH,OAAA;IAAKmB,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBACtCpB,OAAA;MAAKmB,SAAS,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvCxB,OAAA;MAAGmB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAC;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV,CAAC;AAACtB,EAAA,CAvDID,YAAY;EAAA,QACCL,WAAW;AAAA;AAAA6B,EAAA,GADxBxB,YAAY;AAyDlB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}