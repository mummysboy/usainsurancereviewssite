{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monetizelab\\\\OneDrive\\\\Desktop\\\\trisDoc\\\\usainsurancereviews\\\\insurance-form\\\\src\\\\components\\\\UserFlowTwo\\\\StepTwo2.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DriverInfo = () => {\n  _s();\n  const [form, setForm] = useState({\n    dateOfBirth: \"\"\n  });\n  const [errors, setErrors] = useState({});\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setForm({\n      ...form,\n      [name]: value\n    });\n  };\n  const validateDate = dateString => {\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/; // YYYY-MM-DD format\n    if (!dateRegex.test(dateString)) {\n      return \"Invalid date format. Use YYYY-MM-DD.\";\n    }\n    const today = new Date();\n    const inputDate = new Date(dateString);\n    if (isNaN(inputDate.getTime())) {\n      return \"Invalid date. Please enter a valid date.\";\n    }\n    if (inputDate >= today) {\n      return \"Date of birth must be in the past.\";\n    }\n    return \"\";\n  };\n  const handleValidation = () => {\n    const newErrors = {};\n    const dateError = validateDate(form.dateOfBirth);\n    if (dateError) {\n      newErrors.dateOfBirth = dateError;\n    }\n    setErrors(newErrors);\n    if (Object.keys(newErrors).length === 0) {\n      alert(\"Date of birth is valid!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"driver-info\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver's Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Date of Birth\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"dateOfBirth\",\n        placeholder: \"YYYY-MM-DD\",\n        value: form.dateOfBirth,\n        onChange: handleChange,\n        className: errors.dateOfBirth ? \"error\" : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), errors.dateOfBirth && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error-message\",\n        children: errors.dateOfBirth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-step\",\n      onClick: handleValidation,\n      children: \"Next Step\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(DriverInfo, \"hj3+Ku4VoQ8HCgk78vY2H7kiPE8=\");\n_c = DriverInfo;\nexport default DriverInfo;\nvar _c;\n$RefreshReg$(_c, \"DriverInfo\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DriverInfo","_s","form","setForm","dateOfBirth","errors","setErrors","handleChange","e","name","value","target","validateDate","dateString","dateRegex","test","today","Date","inputDate","isNaN","getTime","handleValidation","newErrors","dateError","Object","keys","length","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Monetizelab/OneDrive/Desktop/trisDoc/usainsurancereviews/insurance-form/src/components/UserFlowTwo/StepTwo2.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst DriverInfo = () => {\r\n  const [form, setForm] = useState({\r\n    dateOfBirth: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setForm({ ...form, [name]: value });\r\n  };\r\n\r\n  const validateDate = (dateString) => {\r\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/; // YYYY-MM-DD format\r\n    if (!dateRegex.test(dateString)) {\r\n      return \"Invalid date format. Use YYYY-MM-DD.\";\r\n    }\r\n\r\n    const today = new Date();\r\n    const inputDate = new Date(dateString);\r\n\r\n    if (isNaN(inputDate.getTime())) {\r\n      return \"Invalid date. Please enter a valid date.\";\r\n    }\r\n\r\n    if (inputDate >= today) {\r\n      return \"Date of birth must be in the past.\";\r\n    }\r\n\r\n    return \"\";\r\n  };\r\n\r\n  const handleValidation = () => {\r\n    const newErrors = {};\r\n    const dateError = validateDate(form.dateOfBirth);\r\n\r\n    if (dateError) {\r\n      newErrors.dateOfBirth = dateError;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (Object.keys(newErrors).length === 0) {\r\n      alert(\"Date of birth is valid!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"driver-info\">\r\n      <h2>Driver's Information</h2>\r\n      <div className=\"form-group\">\r\n        <label>Date of Birth</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"dateOfBirth\"\r\n          placeholder=\"YYYY-MM-DD\"\r\n          value={form.dateOfBirth}\r\n          onChange={handleChange}\r\n          className={errors.dateOfBirth ? \"error\" : \"\"}\r\n        />\r\n        {errors.dateOfBirth && (\r\n          <span className=\"error-message\">{errors.dateOfBirth}</span>\r\n        )}\r\n      </div>\r\n      <button className=\"next-step\" onClick={handleValidation}>\r\n        Next Step\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DriverInfo;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC;IAC/BO,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExC,MAAMU,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCR,OAAO,CAAC;MAAE,GAAGD,IAAI;MAAE,CAACO,IAAI,GAAGC;IAAM,CAAC,CAAC;EACrC,CAAC;EAED,MAAME,YAAY,GAAIC,UAAU,IAAK;IACnC,MAAMC,SAAS,GAAG,qBAAqB,CAAC,CAAC;IACzC,IAAI,CAACA,SAAS,CAACC,IAAI,CAACF,UAAU,CAAC,EAAE;MAC/B,OAAO,sCAAsC;IAC/C;IAEA,MAAMG,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;IACxB,MAAMC,SAAS,GAAG,IAAID,IAAI,CAACJ,UAAU,CAAC;IAEtC,IAAIM,KAAK,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;MAC9B,OAAO,0CAA0C;IACnD;IAEA,IAAIF,SAAS,IAAIF,KAAK,EAAE;MACtB,OAAO,oCAAoC;IAC7C;IAEA,OAAO,EAAE;EACX,CAAC;EAED,MAAMK,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpB,MAAMC,SAAS,GAAGX,YAAY,CAACV,IAAI,CAACE,WAAW,CAAC;IAEhD,IAAImB,SAAS,EAAE;MACbD,SAAS,CAAClB,WAAW,GAAGmB,SAAS;IACnC;IAEAjB,SAAS,CAACgB,SAAS,CAAC;IAEpB,IAAIE,MAAM,CAACC,IAAI,CAACH,SAAS,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;MACvCC,KAAK,CAAC,yBAAyB,CAAC;IAClC;EACF,CAAC;EAED,oBACE5B,OAAA;IAAK6B,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1B9B,OAAA;MAAA8B,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BlC,OAAA;MAAK6B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB9B,OAAA;QAAA8B,QAAA,EAAO;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5BlC,OAAA;QACEmC,IAAI,EAAC,MAAM;QACXzB,IAAI,EAAC,aAAa;QAClB0B,WAAW,EAAC,YAAY;QACxBzB,KAAK,EAAER,IAAI,CAACE,WAAY;QACxBgC,QAAQ,EAAE7B,YAAa;QACvBqB,SAAS,EAAEvB,MAAM,CAACD,WAAW,GAAG,OAAO,GAAG;MAAG;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,EACD5B,MAAM,CAACD,WAAW,iBACjBL,OAAA;QAAM6B,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAExB,MAAM,CAACD;MAAW;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAC3D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACNlC,OAAA;MAAQ6B,SAAS,EAAC,WAAW;MAACS,OAAO,EAAEhB,gBAAiB;MAAAQ,QAAA,EAAC;IAEzD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAChC,EAAA,CApEID,UAAU;AAAAsC,EAAA,GAAVtC,UAAU;AAsEhB,eAAeA,UAAU;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}