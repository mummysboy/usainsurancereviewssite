{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const LazyImage=_ref=>{let{src,alt,placeholder}=_ref;const[isLoaded,setIsLoaded]=useState(false);const imgRef=useRef(null);useEffect(()=>{const observer=new IntersectionObserver((entries,observer)=>{entries.forEach(entry=>{if(entry.isIntersecting){const img=entry.target;img.src=src;// Set the image source when it comes into view\nobserver.unobserve(img);}});});if(imgRef.current){observer.observe(imgRef.current);}return()=>{if(imgRef.current){observer.unobserve(imgRef.current);}};},[src]);return/*#__PURE__*/_jsxs(\"div\",{className:\"lazy-image-wrapper\",children:[!isLoaded&&/*#__PURE__*/_jsx(\"img\",{src:placeholder,alt:\"placeholder\",className:\"lazy-placeholder\"}),/*#__PURE__*/_jsx(\"img\",{ref:imgRef,alt:alt,className:\"lazy-image\",onLoad:()=>setIsLoaded(true),style:{opacity:isLoaded?1:0}})]});};export default LazyImage;","map":{"version":3,"names":["React","useState","useRef","useEffect","jsx","_jsx","jsxs","_jsxs","LazyImage","_ref","src","alt","placeholder","isLoaded","setIsLoaded","imgRef","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","img","target","unobserve","current","observe","className","children","ref","onLoad","style","opacity"],"sources":["C:/Users/Monetizelab/OneDrive/Desktop/trisDoc/usainsurancereviews/insurance-form/src/components/LazyImage.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nconst LazyImage = ({ src, alt, placeholder }) => {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const imgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver((entries, observer) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          const img = entry.target;\r\n          img.src = src; // Set the image source when it comes into view\r\n          observer.unobserve(img);\r\n        }\r\n      });\r\n    });\r\n\r\n    if (imgRef.current) {\r\n      observer.observe(imgRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (imgRef.current) {\r\n        observer.unobserve(imgRef.current);\r\n      }\r\n    };\r\n  }, [src]);\r\n\r\n  return (\r\n    <div className=\"lazy-image-wrapper\">\r\n      {/* Placeholder Image */}\r\n      {!isLoaded && (\r\n        <img src={placeholder} alt=\"placeholder\" className=\"lazy-placeholder\" />\r\n      )}\r\n      {/* Actual Image */}\r\n      <img\r\n        ref={imgRef}\r\n        alt={alt}\r\n        className=\"lazy-image\"\r\n        onLoad={() => setIsLoaded(true)}\r\n        style={{ opacity: isLoaded ? 1 : 0 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LazyImage;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,MAAM,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3D,KAAM,CAAAC,SAAS,CAAGC,IAAA,EAA+B,IAA9B,CAAEC,GAAG,CAAEC,GAAG,CAAEC,WAAY,CAAC,CAAAH,IAAA,CAC1C,KAAM,CAACI,QAAQ,CAAEC,WAAW,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CAC/C,KAAM,CAAAc,MAAM,CAAGb,MAAM,CAAC,IAAI,CAAC,CAE3BC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAa,QAAQ,CAAG,GAAI,CAAAC,oBAAoB,CAAC,CAACC,OAAO,CAAEF,QAAQ,GAAK,CAC/DE,OAAO,CAACC,OAAO,CAAEC,KAAK,EAAK,CACzB,GAAIA,KAAK,CAACC,cAAc,CAAE,CACxB,KAAM,CAAAC,GAAG,CAAGF,KAAK,CAACG,MAAM,CACxBD,GAAG,CAACZ,GAAG,CAAGA,GAAG,CAAE;AACfM,QAAQ,CAACQ,SAAS,CAACF,GAAG,CAAC,CACzB,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CAEF,GAAIP,MAAM,CAACU,OAAO,CAAE,CAClBT,QAAQ,CAACU,OAAO,CAACX,MAAM,CAACU,OAAO,CAAC,CAClC,CAEA,MAAO,IAAM,CACX,GAAIV,MAAM,CAACU,OAAO,CAAE,CAClBT,QAAQ,CAACQ,SAAS,CAACT,MAAM,CAACU,OAAO,CAAC,CACpC,CACF,CAAC,CACH,CAAC,CAAE,CAACf,GAAG,CAAC,CAAC,CAET,mBACEH,KAAA,QAAKoB,SAAS,CAAC,oBAAoB,CAAAC,QAAA,EAEhC,CAACf,QAAQ,eACRR,IAAA,QAAKK,GAAG,CAAEE,WAAY,CAACD,GAAG,CAAC,aAAa,CAACgB,SAAS,CAAC,kBAAkB,CAAE,CACxE,cAEDtB,IAAA,QACEwB,GAAG,CAAEd,MAAO,CACZJ,GAAG,CAAEA,GAAI,CACTgB,SAAS,CAAC,YAAY,CACtBG,MAAM,CAAEA,CAAA,GAAMhB,WAAW,CAAC,IAAI,CAAE,CAChCiB,KAAK,CAAE,CAAEC,OAAO,CAAEnB,QAAQ,CAAG,CAAC,CAAG,CAAE,CAAE,CACtC,CAAC,EACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}